<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edward Zh</title>
    <description>一个普通的程序员 / 喜欢粤语歌
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Jul 2017 07:35:06 +0800</pubDate>
    <lastBuildDate>Sat, 01 Jul 2017 07:35:06 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>EZSql | 引子</title>
        <description>&lt;p&gt;在iOS开发中不可避免地要用到本地存储,通常在小数据量的情况下可以直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSKeyedArchiver&lt;/code&gt;进行对象持久化,然而在数据量大且有复杂操作需求的情景下,&lt;code class=&quot;highlighter-rouge&quot;&gt;NSKeyedArchiver&lt;/code&gt;的性能实在不堪入目. 这时候就有两个选择:&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreData&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Sqlite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreData&lt;/code&gt;不用多说,作为亲儿子,基本每次iOS更新都会提供新的Api,性能也在逐步提高,但是考虑到CoreData属于仅用于Apple系设备的编程,学习成本高且不利于跨界.而作为一名程序员或多或少都接触过数据库,此时&lt;code class=&quot;highlighter-rouge&quot;&gt;Sqlite&lt;/code&gt;的优势便凸显而出,同时,在跨平台情况下,&lt;code class=&quot;highlighter-rouge&quot;&gt;Sqlite&lt;/code&gt;的可移植性也是无法忽视的优势.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;挖了个新坑&lt;/h2&gt;

&lt;p&gt;日常iOS开发中一般使用FMDB操作数据库,但是在日益复杂的需求中,FMDB的Sql语句拼接功能略显羸弱,且市面上大部分框架对树状对象结构支持得都不是很好.&lt;/p&gt;

&lt;p&gt;所以,用惯了MyBatis之后,决定自己造一个类MyBatis的SqlBuilder,起名EZSql,一来丰富简历,二来提供iOS开发中数据库操作的另一个选择&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;功能设计&lt;/h2&gt;

&lt;h3 id=&quot;mapperxml&quot;&gt;Mapper.xml&lt;/h3&gt;
&lt;p&gt;格式类似Mybatis&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;mapper&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyMapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testSelect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;House&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        SELECT col1,col2,col3 from myTable
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter != null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            where
            1=1
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter.min_col2 != null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                and col2 &lt;span class=&quot;ni&quot;&gt;&amp;amp;gt;&lt;/span&gt; #{filter.min_col2}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter.max_col2 != null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                and col2 &lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt; #{filter.min_col2}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter.col3_options != null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                and
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;foreach&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;collection=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter.col3_options&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;separator=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; or &quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;open=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;close=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;item=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;option&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    ABS(col3 - #{option}) &lt;span class=&quot;ni&quot;&gt;&amp;amp;lt;&lt;/span&gt; 4
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/foreach&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/query&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mapper&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;初步准备支持&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;resultMap&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;query&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;if&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;foreach&amp;gt;&lt;/code&gt;标签以及&lt;code class=&quot;highlighter-rouge&quot;&gt;${}&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;占位符,提供基础的Sql渲染功能&lt;/p&gt;

&lt;h3 id=&quot;protocol&quot;&gt;protocol&lt;/h3&gt;
&lt;p&gt;EZSql的调用方法和Mybatis十分类似,只需要定义一个和Java中interface作用类似的protocol&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;@protocol MyMapper &amp;lt;EZSqlMapper&amp;gt;
- (Model *)testSelect:(NSDictionary *)params; //第一个参数前的方法名必须和xml中query的id对应
- (void)itemWithNoParams;
@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用工厂方法获得Mapper&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;    id &amp;lt;MyMapper&amp;gt; mapper = [EZSMapperFactory mapperWithProtocol:@protocol(MyMapper)];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;即可调用protocol的方法了&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;    [mapper itemWithNoParams];&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-2&quot;&gt;结构设计&lt;/h2&gt;

&lt;p&gt;EZSql分为&lt;code class=&quot;highlighter-rouge&quot;&gt;Parser&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Renderer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ResultMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Mapper&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MapperFactory&lt;/code&gt;几个主要对象.&lt;/p&gt;

&lt;h3 id=&quot;parser&quot;&gt;Parser&lt;/h3&gt;

&lt;p&gt;顾名思义,Parser提供对xml文件的解析,生成ResultMap对象和Renderer对象的不同子类,以供Mapper使用&lt;/p&gt;

&lt;h3 id=&quot;renderer&quot;&gt;Renderer&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Renderer&lt;/code&gt;及其子类负责对SQL语句的具体渲染, 其公有方法为&lt;code class=&quot;highlighter-rouge&quot;&gt;- (NSString *)renderWithParams:(NSDictionary *)&lt;/code&gt;,具体渲染流程如图&lt;/p&gt;

&lt;p&gt;以&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;SELECT * FROM ${table} WHERE col1 = #{text}&quot;&lt;/code&gt;为例,传入键值对&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objectivec&quot; data-lang=&quot;objectivec&quot;&gt;    @{
      @&quot;table&quot;:@&quot;table1&quot;,
      @&quot;text&quot;:@&quot;text1&quot;
    }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;//img.edzh.me/43ba6b05e00a27468129fc3a36383722.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;即针对不同的pattern生成不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;Renderer&lt;/code&gt;对象,由&lt;code class=&quot;highlighter-rouge&quot;&gt;Mapper&lt;/code&gt;进行线性调取,即可完成一次SQL语句的拼接工作.&lt;/p&gt;

&lt;h3 id=&quot;resultmap&quot;&gt;ResultMap&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ResultMap&lt;/code&gt;用于将SQL输出的键值对转换成Model对象.功能类似YYModel.&lt;/p&gt;

&lt;h3 id=&quot;mapper&quot;&gt;Mapper&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mapper&lt;/code&gt;用于实际消息的转发, 每个XML文件对应一个单例的&lt;code class=&quot;highlighter-rouge&quot;&gt;Mapper&lt;/code&gt;,收到消息后进行对应调用并输出结果.&lt;/p&gt;

&lt;h3 id=&quot;mapperfactory&quot;&gt;MapperFactory&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MapperFactory&lt;/code&gt;用于Mapper类的创建, 即动态生成Mapper的子类并创建实例进行缓存,这是为了解决不同&lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;可能存在同名方法的问题,所以针对每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Protocol&lt;/code&gt;, MapperFactory`会调用runtime方法进行Mapper子类的生成. 具体Protocol定义的消息由Mapper进行识别.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;从零开始写框架任重道远. 我会将开发日志在博客上更新, 源码已经托管到&lt;a href=&quot;https://github.com/ObesityChow/EZSql&quot;&gt;Github&lt;/a&gt;,期待有大牛指导我这个小开发仔&lt;/p&gt;
</description>
        <pubDate>Tue, 16 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/ezsql-foreword/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/ezsql-foreword/</guid>
        
        <category>Tech-iOS</category>
        
        
      </item>
    
      <item>
        <title>面经 | 鹅厂2018届实习生招聘</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;距离上一篇博客已经过了6个月，虽然也没人看。 其实我是攒了点东西的， 然而博客配图真的难搞，所以就搁置了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;现在有无数的人鼓吹读书无用论，认为大学好坏不决定个人成长。 但是从这次鹅厂从简历投递到最后拿到offer的过程来看， &lt;strong&gt;大学的好坏真的很重要&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;2017-03-25&lt;/h3&gt;
&lt;p&gt;忽然听说腾讯的实习校招已经快要结束。26号半夜忙完手头的事情后发现简历投递28号就要截止。 第二天从零开始写了篇简历匆匆投递。周边标定互联网公司的同学少之又少，消息的匮乏是我在应聘实习生的过程被动处境的主要原因。 这也是大学水平直接决定的&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;现在这个时代， 信息的获取速度至关重要&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;03-28 简历投递&lt;/h3&gt;
&lt;p&gt;进入&lt;a href=&quot;http://join.qq.com&quot;&gt;join.qq.com&lt;/a&gt;进行了简历的投递，恍惚之间忘了有没有申请岗位，当我想起来的时候整个投递过程已经结束。可以说是在惶恐中等待结果&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;04-02技术笔试&lt;/h3&gt;
&lt;p&gt;鹅厂技术笔试用的是第三方的考试平台，支持在线编程，在线debug。 全程必须开启摄像头，跳出页面达到一定次数判为作弊。 可以说在线上考试中已经算是严格的一类。 全凭印象回忆两周前的考试，试题分为4块，分别为智力题， 基础题， 程序填空和编程题。智力测验难度不高，用基本的归纳思维可以解决大部分。基础题中C++的覆盖范围较广，虚类虚方法的继承，构造方法的继承占了一块不小的比重。可能是由于鹅厂的Cpp技术栈导致的试题偏向吧。也正因此，我答得有点难受&lt;/p&gt;

&lt;p&gt;程序填空和编程题总体不难， 但是因为笔试时我正在南通朋友家中，完成得并不理想。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;04-13 一面&lt;/h3&gt;
&lt;p&gt;笔试完成后感觉并不好，我也一度认为自己挂了。 面试通知是在准备阿里/携程/去哪儿/京东的简历投递时收到的。
&lt;img src=&quot;//img.edzh.me/be4e79e7b1de1bb201b12b6ba97389e8.jpg&quot; alt=&quot;收到这个短信的时候整个人一点准备都没有&quot; /&gt;
兴奋中急吼吼地给第二天的课请假，朋友圈呼朋唤友找人同行。&lt;/p&gt;

&lt;p&gt;进入作为等待区的宴会厅，扫码签到。这里介绍一下腾讯的校招系统，得益于腾讯庞大的用户积累，应聘者通过微信公众号 腾讯招聘 登录申请时的QQ账号就能把自己的简历和微信绑定。面试结果等招聘进展都会在公众号上提供查询功能。等候区现场架设了一个类似微信墙的叫号系统。 到时会有语音叫号提醒进入面试官房间。 每个人的面试房间只通过手机短信和公众号信息的方式进行发送，现场语音叫号仅提示查看手机信息 。
&lt;img src=&quot;//img.edzh.me/8ce5edb4164c9ced5e74e3d4bc5eba38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次面试总体感觉不尽如人意。 一进去面试官问我有没有听说过OCS(OCScript， 腾讯自己的热修复框架，未开源)。随后要求用算法解决数独问题。在毫无竞赛经验的情况下现场推导思路。无意中实现了回溯法，这也暴露了基础知识不足的缺陷。同时一面中也问了一些计算机基础题，如进程线程区别，进程通信的方式。以及一道很简单的概率题(要求讲出求解过程)。&lt;/p&gt;

&lt;p&gt;在最后的应聘者提问环节旁敲侧击地问了一下面试结果。面试官说对我表现挺满意的，让我回去等通知。 然而截止现在(4-13 21:15)，公众号上查出的结果还是初面，同去的其他人都查到了拒绝的状态。不知道是在犹豫还是复试通知还没发送。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;腾讯的面试风格和阿里相差较大。 面试官并不询问简历上的具体项目， 而是问了一些非常基础的题目来考察根基。 这也许是因为cpp技术栈那崎岖的学习曲线吧。 总的来说，阿里巴巴的面试更加适合我这种实践性强，考试羸弱的选手。 然而鹅厂依旧是我的Dream Company。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;04-14 总监面&lt;/h3&gt;
&lt;p&gt;昨天晚上21:55接到通知次日11点面试。。 赞腾讯工作效率的同时，又开始了新一轮的调整日程。
&lt;img src=&quot;//img.edzh.me/05c707785af4aedb2691e0ebdfd0f31b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在进入面试房间的之前，我曾以为二面和一面一样重视基础，抱着忐忑的心情进入房间之后，我知道，我又猜错了。&lt;/p&gt;

&lt;p&gt;总监面的画风和一面不同，先是问了一些特别基础的细节，比如字符串最后一位是什么，我答\0。他又问那你知不知道\1是什么，老老实实答不知道。以及数据库五范式的作用。随后要求用c语言或者伪码写一个词频分析器(输入单行的长串，各单词用空格分割，统计词频)，我还用错了&lt;code class=&quot;highlighter-rouge&quot;&gt;strcmp()&lt;/code&gt;，认为&lt;code class=&quot;highlighter-rouge&quot;&gt;strcmp(str1, str2)!=0&lt;/code&gt; 才是真。用最挫的方式写出来之后又要求加一个词频排序输出功能，因为从来没背过代码，只能手写了个优化后的冒泡。这一关就算是过了。&lt;/p&gt;

&lt;p&gt;在大约20分钟的基础题之后，面试官开始指着简历上的项目进行询问，总监问了我最有成就感的项目是哪一个并做简单介绍。这一部分问的很细。所以简历上尤其是项目经历不能造假，否则从业人员扫一眼问几句绝对清楚你有多少斤两。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;感谢南邮的智能设备项目让我用了很多科学的设计，学到了很多的同时也能体现在项目经验中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;开始聊项目那就是我的主战场了，和面试官谈笑风生40分钟结束战斗&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;简历里的项目面试官&lt;strong&gt;一定会看&lt;/strong&gt;并且问细节，&lt;strong&gt;不要作假&lt;/strong&gt;，年代久远的自己回去过一遍可能效果不错。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到了提问环节，经历一面之后非常心虚的我直接问了对今天的面试表现能否做一个评价，结果面试官说对我很满意!让我直接回去等HR面试通知。下午2点才回到仙林，随便吃了点中饭，兴奋之余着手准备HR面。&lt;/p&gt;

&lt;h3 id=&quot;hr&quot;&gt;04-14 HR面&lt;/h3&gt;

&lt;p&gt;到宿舍后其实整个人是放松的状态。HR面主要考察价值观，对企业文化的了解和团队协作等。准备在床上休息一段时间，晚上开始看相关的材料。在17:10，刚准备下床开始看资料时，收到了HR面的通知。乍一看通知HR面，心里还在想腾讯的效率很高，细看时间，是当天晚上18:30。打开高德一查路况，市里毫无疑问地堵车了。火急火燎坐地铁，出站后一路小跑，在18:20堪堪赶到作为等候区的宴会厅签到。等候区寥寥数人，看起来像是几个等待技术面的学生， 前台工作人员在打王者荣耀。大约到了18:40，有工作人员过来统计了一下剩余的面试人数， 现场只有3个等待HR面的学生。到了18:50左右，我去咨询了一下工作人员为什么面试还没开始，他帮我在系统查了一下情况，告诉我现场3个人都是等这个HR面试的，我是最后一个，并惊讶于我早上面完总监晚上就HR，说我应该很棒。我知道有得等了，于是淡定地去前面取一瓶免费的矿泉水，插上充电宝开始刷知乎(现在想来，这段时间拿来做功课可能更好)。
&lt;img src=&quot;//img.edzh.me/e0113e00a52ffe87f08dece800d958ad.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;20:00&lt;/h4&gt;

&lt;p&gt;终于在微信上收到了去面试官房间的通知，HR是一个漂亮的小姐姐。&lt;/p&gt;

&lt;p&gt;HR面试和技术面有很多不同， HR支了一张独立的桌子，和面试人面对面而坐，方便他观察面试人的表现。一开始让我自我介绍。简单地介绍了一下学校学院专业以及学生会任职情况和项目经历之后，就开始问籍贯是否独生子女以及情感状态。以及和女朋友计划不同岂不是要准备异地恋等有点尴尬的问题。&lt;/p&gt;

&lt;p&gt;奇怪的是，一个技术的面试居然要问如何帮老师订机票排行程，凭着出去旅游的经验掰掰扯扯讲了8个点。第二个问题是一根筷子的10个用途(扶额)。以及智力题(姑且认为是智力题吧)。&lt;/p&gt;

&lt;p&gt;随后开始问我对腾讯企业文化的了解，8个BG背不全，对于6大平台更是不知道。 HR见我答不出来就让我举出腾讯的10个产品。接着就着简历开始问项目的设计思路，因为我怕他听不懂，在碰到一些技术名词的时候稍加了一点解释，HR问我是不是怕她听不懂，我说是。他说没事按自己思路说。从这一点我判断:&lt;strong&gt;hr面问项目可能只是想确认简历项目的真实性。&lt;/strong&gt;大概聊了两三个项目之后，hr开始询问成绩等在校情况，如实回答并且解释了一下有几门课挂掉的原因。&lt;/p&gt;

&lt;p&gt;随后便是老生常谈的提问环节， 由于HR都是专业的面试官，不会透露面试结果。我换了个问法:以一个HR的角度来看，我这次面试有什么需要改进的地方。HR果然都是人精，他说这次面试很好，但是由于职业要求他不会明确的告诉我结果，改进的话在面试前还是要做好企业文化相关的功课，这样也显得尊重对方公司。同时告诉我复试面试官给我的评价不错。之后加试(也就是额外的一轮面试)的可能性不大，等待通知就行了。&lt;/p&gt;

&lt;p&gt;第二个问题是为什么今天通知时间这么赶(再一次作死)，hr先是道了歉，然后说因为有几个人的结果变更提交的特别早，他想和这几个人多聊一会，毕竟到了周六周日就是hr面扎堆，了解的时间不够。愉快地道别之后出酒店，看看时间已经晚上9点。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;04-18 状态变更&lt;/h3&gt;

&lt;p&gt;上周五面试完后，微信查询状态一直是HR面试中，期间经历了大部分大厂校招人的焦虑情绪:大约半小时查一次状态，写项目的时候趁着编译也要查一下。等待的这四天朋友圈画风迥异， 整个人都有点烦躁。。 在4-18上午南京场已经逐步有几个人状态变为已完成所有面试，也传来小道消息说这次进入HR面的人特别多，可能要对半刷人，整个人焦虑不堪，等到下午上课终于自己的状态也变了。大石头算是落了地，毕竟面试进行到这一步，有没有offer就看公司对我的需求了。&lt;/p&gt;

&lt;h3 id=&quot;offer&quot;&gt;04-24 OFFER!&lt;/h3&gt;

&lt;p&gt;早上开始面试群里就有武汉面试的SNG的同学收到了offer电话。 说不紧张那是假的。 全天手机不敢静音，包括开会。 过去一整周完全没有产出。 到了下午，开会的时候终于接到一个广东的电话。在确认基本信息以及待遇(鹅厂高压线，不可言)后。 大约过了半小时，就收到了Offer邮件。&lt;/p&gt;

&lt;h3 id=&quot;offer-1&quot;&gt;Offer后续流程&lt;/h3&gt;

&lt;p&gt;Offer邮件中附带了录用函，健康承诺书以及实习生入职指南。按要求打印填写并签字录用函以及健康承诺书后，大约过了一天就收到了入职信息调查的短信以及邮件。
&lt;img src=&quot;//img.edzh.me/b8069d49b7a54d0769a3b69477d7ef8e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在实习生群里看到有些同学早已入职，学校的日子变得索然无味(本来就是)。奈何有项目拖累无法提前赶赴深圳，期待。&lt;/p&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One More Thing&lt;/h2&gt;

&lt;p&gt;昨晚看到&lt;a href=&quot;https://blog.ijason.cc&quot;&gt;Jason的博客&lt;/a&gt;有这么一句话
&lt;img src=&quot;//img.edzh.me/96159e3cfd243f4d8d2363053f1a5fa5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;想到大一时懵懵懂懂也想着鹅厂，一直到后面不停的项目学了很多有的没的，现在算是半个全栈。 发现这几年在某种程度上讲确实挺寂寞的。 鹅厂，或者说一二线互联网企业的氛围可能能够提供更多「圈内」的朋友吧。至少这几天在实习生群中，抛出任何一个梗都有人接的感觉。 真好&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//img.edzh.me/c60b744f2b2a0f1d0428936db4a81e8d.interview_img_wechat_snap&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/TencentInterview/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/TencentInterview/</guid>
        
        <category>瞎逼逼</category>
        
        
      </item>
    
      <item>
        <title>不务正业 | 文档生成工具apiDoc</title>
        <description>&lt;p&gt;本来应该是在研究webrtc的,但是混蛋项目前负责人给我甩了个美国的ftp让我去扒代码,来来来感受一下这个速度
&lt;img src=&quot;//img.edzh.me/cf0164c6524745ffac35d81e0148b216.png&quot; alt=&quot;downloadSnap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是在扒代码的同时,着手开工写手头另一个项目的文档,之前的api都是用md手写的,后来随着项目越发复杂,这个方式不再高效,于是着手调研了一番自动文档生成工具.&lt;/p&gt;

&lt;p&gt;进入我视野并且试用过的有2种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://swagger.io/&quot;&gt;swagger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://apidocjs.com&quot;&gt;apiDoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先说&lt;a href=&quot;http://swagger.io/&quot;&gt;swagger&lt;/a&gt;,它利用java注解来实现文档的自动生成,只要项目部署到服务器上,访问对应url就能直接看到项目文档.我不选择这个工具的原因是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;直接把文档作为代码的一部分放入工程,随着项目日渐庞大势必增加编译时间和编译结果尺寸.&lt;/li&gt;
  &lt;li&gt;文档内容并不随时跟着接口改变,相当于同时维护两份代码,如何保持一致性是一个难以解决的问题.&lt;/li&gt;
  &lt;li&gt;嵌入代码相当于在生产环境也要占用一部分资源进行文档的存储渲染,浪费资源.虽然可以通过条件编译解决这个问题,但是我懒:)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再讲&lt;a href=&quot;http://apidocjs.com&quot;&gt;apiDoc&lt;/a&gt;,apiDoc采用注释方式来解决文档生成问题,一个常见的文档是这样的&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 *
 * @api {get} /bird/:speciesId birdById
 * @apiName birdById
 * @apiGroup bird
 * @apiVersion 0.1.0
 * @apiDescription 关键词查找 可用拉丁名 英文名 中文名查找鸟种
 * @apiPermission anyone
 * @apiParam :speciesId 鸟种id
 * @apiParamExample {json} Request Example
 *    GET /bird/:speciesId
 *
 * @apiSuccess {String} code 88
 * @apiSuccess {String} message ok
 * @apiSuccess {Object} data ok
 * @apiSuccess {String} data.englishName
 * @apiSuccess {String} data.familia 科
 * @apiSuccess {String} data.genus 属
 * @apiSuccess {int} data.id 鸟种id
 * @apiSuccess {String} data.latinName
 * @apiSuccess {String} data.localName
 * @apiSuccess {String} data.order 目
 * @apiSuccess {String} data.shape 体型大小
 * @apiSuccessExample Success-Response:
 *  HTTP/1.1 200 OK
 *{
 *    &quot;code&quot;: 88,
 *    &quot;data&quot;: [
 *        {
 *            &quot;englishName&quot;: &quot;Snow Partridge&quot;,
 *            &quot;familia&quot;: &quot;雉科&quot;,
 *            &quot;genus&quot;: &quot;雪鹑属&quot;,
 *            &quot;id&quot;: 1,
 *            &quot;latinName&quot;: &quot;Lerwa lerwa&quot;,
 *            &quot;localName&quot;: &quot;雪鹑&quot;,
 *            &quot;order&quot;: &quot;鸡形目&quot;,
 *            &quot;shape&quot;: &quot;斑鸠与鸬鹚之间&quot;
 *        }
 *    ],
 *    &quot;message&quot;: &quot;ok&quot;
 *}
 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;apiDoc的优势在于:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;作为注释存在于源文件,修改接口的同时直接修改文档,不存在同时操作两份文件的问题.同时,编译时直接忽略注释,对后续的业务流程没有影响.&lt;/li&gt;
  &lt;li&gt;文档内容并不随时跟着接口改变这个问题虽然还是没有解决,但是相比于其他优势,这个就当妥协了吧.&lt;/li&gt;
  &lt;li&gt;除了代码本身,不占用任何资源&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;apiDoc基于node.js,所以我们需要一个npm,还没有的同学自己百度怎么下载&lt;/p&gt;

&lt;p&gt;在shell执行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm install apidoc -g&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由于国内网络问题,这个步骤可能需要等待比较长的时间.&lt;/p&gt;

&lt;p&gt;在项目根目录创建apidoc.json(如果是node.js项目,可以直接在package.json中加入apiDoc的配置项),常见的配置为&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A basic apiDoc example&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在代码中使用注释编写文档(各种语言的注释格式可见&lt;a href=&quot;http://apidocjs.com&quot;&gt;apiDoc&lt;/a&gt;,此处以Java为例),具体语法见&lt;a href=&quot;http://apidocjs.com/#params&quot;&gt;这里&lt;/a&gt;,&lt;a href=&quot;http://blog.csdn.net/soslinken/article/details/50468896&quot;&gt;中文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编写完后,在shell执行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;apidoc -i ./ -o ./doc/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此处参数意义为:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-i [inputPath]&lt;/li&gt;
  &lt;li&gt;-o [outputPath]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时就可以在根目录/doc文件夹看到生成的文档了,打开index.html,就能看到所有的api以group-name的方式升序排列.可以编写脚本直接上传到服务端.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/apiDoc/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/apiDoc/</guid>
        
        <category>Tech-杂</category>
        
        
      </item>
    
      <item>
        <title>Hello world!</title>
        <description>&lt;p&gt;一直觉得开博客是一个很矫情的事情,而且我的文笔仅在写正经文章的时候有那种词汇跟着思维蹦出来的感觉.(是的我也感觉非常weird)我感觉还是有必要把这个博客的创建原因,以及大概的内容做一个综述,也算是我当了这几年学生干部的一个能力的回馈吧…(&lt;em&gt;遇事喜欢搞文档&lt;/em&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;为什么开&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;促成我开这个博客的原因.一个是感觉从初二开始涉足程序员的领域,从vb6一直到现在iOS / Java双修,作品出了很多个,然而没什么东西沉淀下来,基本都在脑子里藏着.没留下什么文档,踩过的坑也只有自己知道.不符合现在愈演愈烈的开源趋势.所以,虽然本人水平并不高,但是对初学者还是有点东西可讲的.也算是给圈子做点微小的贡献.另外呢,前阵子统计了一下几个社交平台的流量,微博也发了1.8k条,基本弃用的QQ空间也有大约4.1k条状态.朋友圈数字未知,但是肯定有500条以上.感觉社交平台的140字有时候并不足以记录生活,所以权当是日记来写,如果有幸有陌生人关注这个博客,我也非常乐意分享我的生活.最后也是因为终于申请到了&lt;a href=&quot;https://github.com&quot; title=&quot;Github&quot;&gt;Github&lt;/a&gt;的&lt;a href=&quot;http://education.github.com&quot; title=&quot;Education Pack&quot;&gt;Education Pack&lt;/a&gt;,也弄到了满意的个人域名&lt;a href=&quot;https://edzh.me&quot; title=&quot;edzh.me&quot;&gt;edzh.me&lt;/a&gt;(我的全名是Edward Zhou),也算是有机会能够过上我见过的大部分程序员的生活了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;要写什么&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个博客不仅仅是技术博客,有时候也会发点生活吐槽,我也会尽量写的陌生人也知道发生了什么.就当是锻炼文笔了吧.技术上,我会把当前手头项目所有踩过的坑,以及仅仅通过百度无法达成的需求的解决方案发上来,这也是很多陌生人可能访问这个博客的原因.
&lt;br /&gt;
此外,就像首页的标签”&lt;strong&gt;好奇心 | 码代码 | 按快门 | 穷 | Apple | 软狗 | +1s&lt;/strong&gt;“,这就是我.有什么有意思的小玩意儿我都会共享上来.有兴趣的可以持续关注.想交流的可以发邮件到&lt;a href=&quot;mailto:i@edzh.me&quot; title=&quot;联系我&quot;&gt;i@edzh.me&lt;/a&gt;,本来这个模板是有评论功能的,我关了.&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/10/Foreword/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/Foreword/</guid>
        
        <category>瞎逼逼</category>
        
        
      </item>
    
  </channel>
</rss>
